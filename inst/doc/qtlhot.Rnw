%\VignetteIndexEntry{Qtlhot Tutorial}
%\VignetteKeywords{permutation,threshold,QTL}

\documentclass[11pt]{article}

\usepackage{epsf}
\usepackage{epsfig}
\usepackage{amssymb,amsmath}
\usepackage{amsbsy}
\usepackage[all]{xy}
\usepackage{latexsym}
\usepackage{float}
\usepackage{amsthm}
\usepackage{graphicx}
\usepackage{Sweave}

\topmargin 0.0cm
\oddsidemargin 0cm
\evensidemargin 0cm
\textwidth 16cm
\textheight 21cm

\date{\today}

\SweaveOpts{keep.source=TRUE}




\title{Quantile-based permutation thresholds for QTL hotspot analysis: a tutorial}

\author{Elias Chaibub Neto\footnote{Department of Computational Biology, Sage Bionetworks, Seattle WA} \ and Brian S Yandell\footnote{Department of Statistics, University of Wisconsin-Madison, Madison WI}}

\date{\today}

\begin{document}

\maketitle

%\begin{center}
%{\bf Abstract}
%\end{center}

\section{Motivation}

QTL hotspots, groups of traits co-mapping to the same genomic location, are a common feature of genetical genomics studies. Genomic locations associated with many traits are biologically interesting since they may harbor influential regulators. Nonetheless, non-genetic mechanisms, uncontrolled environmental factors and unmeasured variables are capable of inducing a strong correlation structure among clusters of transcripts, and as a consequence, whenever a transcript shows a spurious linkage, many correlated transcripts will likely map to the same locus, creating a spurious QTL hotspot. Permutation approaches that do not take into account the phenotypic correlation tend to underestimate the size of the hotspots that might appear by change in these situations (Breitling et al. 2008).

This issue motivated the development of permutation tests that preserve the correlation structure of the phenotypes in order to determine the significance of QTL hotspots (Breitling et al. 2008, Chaibub Neto et al. 2012). In this tutorial we present software tools implementing the $NL$-method (Chaibub Neto et al. 2012), the $N$-method (Breitling et al. 2008), and the $Q$-method (West et al. 2007, Wu et al. 2008) permutation approaches.


\section{Overview}

%This tutorial illustrates the application of the $NL$-, $N$- and $Q$-methods, implemented in the \texttt{qtlhot} R package, to a few toy examples. We cover the basic functionally, as well as, more advanced parallel implementation topics. The \texttt{qtlhot} package is built over the \texttt{R/qtl} package (Broman et al. 2003), and we assume the reader is familiar with it.

This tutorial illustrates the application of the $NL$-, $N$- and $Q$-methods, implemented in the \texttt{qtlhot} R package, to a few toy examples. The \texttt{qtlhot} package is built over the \texttt{R/qtl} package (Broman et al. 2003), and we assume the reader is familiar with it.

\section{Basic functionality with No Real Hotspots}

In this section we consider two toy simulated examples. In the first we simulate highly correlated phenotypes. In the second, we simulate uncorrelated phenotypes.

<<loadlib>>=
library(qtlhot)
@

We start by simulating a ``null backcross" data set composed of 1,000 phenotypes, 4 chromosomes, 51 equally spaced genetic markers per chromosome, and 100 individuals, with the \texttt{sim.null.cross} function. The \texttt{latent.eff} parameter control the amount of correlation among the phenotypes. Each phenotype $k$ is generated according to the model $Y_k = \theta L + \epsilon_k$, where $L \sim N(0,\sigma^2)$ is a latent variable, $\theta$ represents the effect (\texttt{latent.eff}) of the latent variable on the phenotype, and $\epsilon_k \sim N(0, \sigma^2)$ represents a residual error term with $\sigma^2$ set to \texttt{res.var}. Note that we do not simulate any QTLs in a ``null cross" and any linkages we might detect in such a data set are due entirely to chance.

<<>>=
ncross1 <- sim.null.cross(chr.len = rep(100, 4),
                          n.mar = 51,
                          n.ind = 100,
                          type = "bc",
                          n.pheno = 1000,
                          latent.eff = 3,
                          res.var = 1,
                          init.seed = 123457)
@


The function \texttt{include.hotspots} takes the ``null cross" as an input and includes 3 hotspots of size \texttt{hsize} at position \texttt{hpos} of chromosome \texttt{hchr} into it. Explicitly, it simulates each one of the hotspots according to the model $Y_k^\ast = \beta M + Y_k$, where $Y_k$ is the phenotype generated by the \texttt{generate.null.cross} function; $M = \gamma \, Q + \epsilon_M$ is a master regulator that affects all phenotypes in the hotspot; $Q$ is a QTL located at position \texttt{hpos} of chromosome \texttt{hchr}; $\gamma$ represents the QTL effect (\texttt{Q.eff}); $\epsilon_M \sim N(0, \sigma^2)$; and $\beta$ is computed such that the association between $Y_k^\ast$ and Q, measured by the LOD score, is given (theoretically) by a valued sampled from the user specified LOD score range (\texttt{lod.range.1} and etc).

<<>>=
cross1 <- include.hotspots(cross = ncross1,
                           hchr = c(2, 3, 4),
                           hpos = c(25, 75, 50),
                           hsize = c(100, 50, 20),
                           Q.eff = 2,
                           latent.eff = 3,
                           lod.range.1 = c(2.5, 2.5),
                           lod.range.2 = c(5, 8),
                           lod.range.3 = c(10, 15),
                           res.var = 1,
                           nT = 1000,
                           init.seed = 12345)
@




Note that by choosing \texttt{latent.eff = 3} we generate highly correlated phenotype data. The distribution of the correlation values for each pair of phenotypes is given below.

<<>>=
nphe1 <- as.matrix(cross1$pheno)
ncor1 <- cor(nphe1)
ncor1 <- ncor1[lower.tri(ncor1)]
summary(ncor1)
@
<<echo=FALSE>>=
if(file.exists("savedperms.RData")) load("savedperms.RData")
@ 

Next we obtain standard permutation thresholds (Churchill and Doerge 1994) for single trait QTL mapping analysis for the sequence \texttt{alphas}, representing target genome wide error rates (GWER).

<<echo=FALSE>>=
if(!exists("pt")) {
  set.seed(123)
  pt <- scanone(ncross1, method = "hk", n.perm = 1000)
}
@
\begin{Schunk}
\begin{Sinput}
> set.seed(123)
> pt <- scanone(ncross1, method = "hk", n.perm = 1000)
\end{Sinput}
\end{Schunk}
<<>>=
alphas <- seq(0.01, 0.10, by=0.01)
spt <- summary(pt, alphas)
spt
lod.thrs <- as.vector(spt)
@

We perform QTL mapping analysis for all 1,000 phenotypes using Haley-Knott regression, and process the LOD profiles by setting to zero LOD values outside the 1.5 LOD support interval (Manichaikul et al. 2006) around the peak at each chromosome (as well as LOD values below the single trait mapping threshold, \texttt{thr}). LOD support intervals are the most commonly used interval estimate for the location of a QTL. By setting to zero the LOD scores outside the LOD support interval we can considerably decrease the spread of the hotspot.

<<>>=
scan1 <- scanone(cross1, pheno.col = 1:1000, method = "hk")
scandrop1 <- set.to.zero.beyond.drop.int(chr = scan1[,1],
                                         scanmat = as.matrix(scan1[,-c(1,2)]),
                                         thr = min(lod.thrs),
                                         drop = 1.5)
@

<<echo=FALSE>>=
counts1 <- t(count.thr(scandrop1, lod.thrs, droptwo = FALSE))
@

Next we infer the hotspot architecture at varying QTL mapping thresholds. In other words, for each genomic position, we count the number of traits that map to it with a LOD score equal or higher than the threshold in \texttt{lod.thrs}. The \texttt{counts1} object is a matrix with 204 rows representing the genetic markers, and 10 columns representing the varying QTL mapping thresholds. As an illustration, we show the counts for the 5 first markers on chromosome 2. The first column gives the counts associated with QTL mapping threshold of 3.11, whereas the last one shows the counts based on the more liberal threshold 2.11. Note how the counts increase as the QTL mapping thresholds decrease.

\begin{Schunk}
\begin{Sinput}
> counts1 <- t(count.thr(scandrop1, lod.thrs, droptwo = FALSE))
\end{Sinput}
\end{Schunk}
<<>>=
counts1[52:56,]
@

\begin{figure}[!ht]
\begin{center}
<<label=plotex1counts,width=6,height=6,fig=TRUE,echo=FALSE>>=
out1 <- data.frame(scan1[, 1:2], counts1)
class(out1) <- c("scanone", "data.frame")
par(mar=c(4.1,4.1,0.1,0.1))
plot(out1, lodcolumn = 5, ylab = "counts", cex.lab = 1.5, cex.axis = 1.5)
@ 
\end{center}
\caption{Hotspot architecture associated with QTL mapping threshold of \Sexpr{round(spt[5,], 2)} in example 1.}
\label{plotex1counts}
\end{figure}

We plot the hotspot architecture inferred using the single trait permutation threshold \Sexpr{round(spt[5,], 2)} ($\alpha = 0.05$). Figure \ref{plotex1counts} shows the counts across the genome. Recall that in the call of function \texttt{include.hotspots} we set to simulate 3 hotspots: (1) a hotspot of size 100 at position 25cM of chromosome 2 with LOD scores around 2.5; (2) a hotspot of size 50 at position 75cM of chromosome 3 with LOD scores ranging from 5 to 8; and (3) a hotspot of size 20 at position 50cM of chromosome 4 with LOD scores ranging from 10 to 15. Nonetheless, Figure \ref{plotex1counts} shows several spurious peaks on chromosome 1, that arise because of the high correlation of the phenotypes.

\begin{Schunk}
\begin{Sinput}
> out1 <- data.frame(scan1[, 1:2], counts1)
> class(out1) <- c("scanone", "data.frame")
> plot(out1, lodcolumn = 5, ylab = "counts", cex.lab = 1.5, cex.axis = 1.5)
\end{Sinput}
\end{Schunk}

Next, we perform permutation tests to assess the statistical significance of the hotspots detected on Figure \ref{plotex1counts}. We start with the $Q$-method permutations. The \texttt{WW.perm} function implements the $Q$-method's permutation scheme (see the Method's section of Chaibub Neto et a. 2012, for details). The \texttt{n.perm} parameter specifies the number of simulations. Here we set it to 100 in order to save time. In practice, we recommend at least 1,000 permutations. The function's output is a matrix with 100 rows representing the permutations, and 10 columns representing the QTL mapping thresholds. Each entry $ij$, represents the maximum number of significant linkages across the entire genome detected at permutation $i$, using the LOD threshold $j$. The \texttt{WW.summary} function computes the Q-method's hotspot size permutation thresholds, that is, the $1-\alpha$ quantiles for each one of the QTL mapping LOD thrsholds in \texttt{lod.thrs}. For instance, the entry at row 10 and column 1 of the \texttt{Q.1.thr} matrix tells us that the 99\% percentile of the permutation distribution of genome wide maximum hotspot size based on a QTL mapping threshold of 2.11 is 27.00. In other words, any hotspot greater than 27 is considered statistically significant at a 0.01 significance level when QTL mapping is done using a 2.11 LOD threshold.

<<echo=FALSE>>=
if(!exists("Q.1")) {
  set.seed(12345)
  Q.1 <- WW.perm(scanmat = scandrop1,
                 lod.thrs = lod.thrs,
                 n.perm = 100,
                 verbose = FALSE)
}
@
\begin{Schunk}
\begin{Sinput}
> set.seed(12345)
> Q.1 <- WW.perm(scanmat = scandrop1,
+              lod.thrs = lod.thrs,
+              n.perm = 100,
+              verbose = FALSE)
\end{Sinput}
\end{Schunk}
<<>>=
Q.1.thr <- WW.summary(Q.1, alphas)
Q.1.thr
@

In general, we are often interested in using the same error rates for the QTL mapping and hotspot analysis. That is, if we adopt a QTL mapping threshold that controls GWER at a 1\% level (in our case, 3.11) we will also want to consider $\alpha = 0.01$ for the hotspot analysis, leading to a hotspot threshold of 12.00. Therefore, we are usually more interested in the diagonal of ``Q.1.thr". For the hotspots depicted in Figure \ref{plotex1counts}, we adopted a GWER of 5\%, and the corresponding $Q$-method's permutation threshold is 18. According to this threshold, all hotspots on Figure \ref{plotex1counts} are significant.

<<>>=
diag(Q.1.thr)
@

Next we consider the $N$- and $NL$-methods. The \texttt{NL.N.perm} function implements the $N$- and $NL$-methods' permutation schemes (see Chaibub Neto et al. 2012, for details). The parameter \texttt{Nmax} sets the maximum hotspot size to be analyzed by the $NL$-method. The parameter \texttt{drop} controls the magnitude of the LOD support interval computation during the LOD profile processing step. The function's output is a list with two elements: \texttt{max.lod.quant} and \texttt{max.N}.

<<echo=FALSE>>=
if(!exists("NL.N.1")) {
  set.seed(12345)
  NL.N.1 <- NL.N.perm(cross = cross1,
                      Nmax = 300,
                      n.perm = 100,
                      lod.thrs = lod.thrs,
                      drop = 1.5,
                      verbose = FALSE)
}
@
\begin{Schunk}
\begin{Sinput}
> set.seed(12345)
> NL.N.1 <- NL.N.perm(cross = cross1,
+                    Nmax = 300,
+                    n.perm = 100,
+                    lod.thrs = lod.thrs,
+                    drop = 1.5,
+                    verbose = FALSE)
\end{Sinput}
\end{Schunk}
<<>>=
names(NL.N.1)
@


The \texttt{max.lod.quant} object stores the output of the $NL$-method's permutations and is given by a matrix with 100 rows representing the permutations, and 300 columns representing the hotspot sizes analyzed. Entry $ij$ stores the maximum genome wide $qLOD(n)$ value computed at permutation $i$ using the QTL mapping threshold $j$. The statistic $qLOD(n)$ corresponds to the $n$th LOD score in a sample ordered from highest to lowest. For instance, consider the first 10 lines and 8 columns of \texttt{max.lod.quant}. At the 6th permutation, we have that the maximum LOD score across the genome is 3.58, the second maximum across the genome is 3.55, and so on.

<<>>=
NL.N.1[[1]][1:10, 1:8]
@

The \texttt{max.N} stores the output of the $N$-method's permutations and is given by a matrix with 100 rows representing the permutations, and 10 columns representing the QTL mapping thresholds. Entry $ij$ stores the maximum genome wide hotspot size detected at permutation $i$ using the QTL mapping threshold $j$. For illustration we show it's first 12 lines (note that we are transposing the output).

<<>>=
t(NL.N.1[[2]][1:12,])
@

The \texttt{NL.N.summary} function computes the $N$- and $NL$-method's hotspot size permutation thresholds.

<<>>=
NL.N.1.thrs <- NL.N.summary(NL.N.1[[1]], NL.N.1[[2]], alphas)
NL.1.thr <- NL.N.1.thrs[[1]]
N.1.thr <- NL.N.1.thrs[[2]]
@

The \texttt{N.1.thr} object is a 10 by 10 matrix with rows indexing the QTL mapping thresholds and columns indexing the target genome wide error rates. Each entry $ij$ shows the hotspot size above which a hotspot is considered significant at a GWER $j$ using the QTL mapping threshold $i$. As before, our interest focus on the diagonal, and the $N$-method's threshold that controls the hotspot GWER at a 5\% level when the QTL mapping was controlled at a GWER of 5\% is 200.55. Note that according to the $N$-method, none of the hotspots on Figure \ref{plotex1counts} is significant.

<<>>=
N.1.thr
diag(N.1.thr)
@


The \texttt{NL.1.thr} object is a matrix with 300 rows representing the spurious hotspot sizes analyzed, and 10 columns representing the target genome wide error rates. Each entry $ij$ represents the LOD threshold at which a hotspot of size greater or equal than $i$ is significant at a GWER less or equal to $j$. As a illustration we show the first five lines.

<<>>=
round(NL.1.thr[1:5,], 4)
@

<<label=figex1slidingbar,width=6,height=6,include=FALSE,echo=FALSE>>=
N.1 <- round(N.1.thr[5, 5])
par(mar=c(4.1,4.1,0.1,4.1))
sliding.bar.plot(scan = data.frame(scan1[, 1:2], scandrop1),
                 lod.thr = NL.1.thr[1:N.1, 5],
                 size.thr = 1:N.1,
                 gap = 50,
                 y.axes = seq(1, N.1, by = 10))
@

\begin{figure}[!ht]
\begin{center}
<<label=plotex1slidingbar,fig=TRUE,echo=FALSE>>=
<<figex1slidingbar>>
@ 
\caption{Hotspot size significance profile targeting GWER at a 5\% level for example 1.}
\label{plotex1slidingbar}
\end{center}
\end{figure}

To visualize these results, we plot on Figure \ref{plotex1slidingbar} the hotspot significance profile for the thresholds targeting GWER at a 5\% level.

\begin{Schunk}
\begin{Sinput}
> N.1 <- round(N.1.thr[5, 5])
. sliding.bar.plot(scan = data.frame(scan1[, 1:2], scandrop1),
+                 lod.thr = NL.1.thr[1:N.1, 5],
+                 size.thr = 1:N.1,
+                 gap = 50,
+                 y.axes = seq(1, N.1, by = 10))
\end{Sinput}
\end{Schunk}


Figure \ref{plotex1slidingbar} depicts a sliding window of hotspot size thresholds ranging from $n=1,\ldots,N$, where $N=201$ corresponds to the (approximate) hotspot size threshold derived from the $N$-method. For each genomic location this figure shows the hotspot sizes at which the hotspot was significant, that is, at which the hotspot locus had more traits than the hotspot size threshold on the left mapping to it with a LOD score higher than the threshold on the right than expected by chance. For example, the hotspot on chromosome 3 was significant up to size 20, meaning that more than 1 trait mapped to the hotspot locus with LOD higher than 3.99, more than 11 traits mapped to the hotspot locus with LOD higher than 3.36, and so on up to hotspot size 49 where more than 49 traits mapped to the hotspot locus with LOD higher than 2.84.

Contrary to the $Q$-method that detected all the hotspots on Figure \ref{plotex1counts} as significant (including the spurious hotspots on chromosome 1), and the $N$-method that did not detect any hotspots, the $NL$-method's sliding window correctly detected the simulated hotspots and showed that the apparent hotspots on chromosome 1 were noisy artifacts.

\section{Example with Uncorrelated Phenotypes}

Next we consider a second toy example with uncorrelated phenotype data. We repeat the simulation and analysis steps presented previously changing \texttt{latent.eff} to zero.

<<>>=
ncross2 <- sim.null.cross(chr.len = rep(100,4), 
                          n.mar = 51, 
                          n.ind = 100,
                          type = "bc", 
                          n.pheno = 1000, 
                          latent.eff = 0, 
                          res.var = 1, 
                          init.seed = 123457)
cross2 <- include.hotspots(cross = ncross2,
                           hchr = c(2, 3, 4),
                           hpos = c(25, 75, 50),
                           hsize = c(100, 50, 20),
                           Q.eff = 2,
                           latent.eff = 0,
                           lod.range.1 = c(2.5, 2.5),
                           lod.range.2 = c(5, 8),
                           lod.range.3 = c(10, 15),
                           res.var = 1,
                           nT = 1000,
                           init.seed = 12345)
nphe2 <- as.matrix(cross2$pheno)
ncor2 <- cor(nphe2)
ncor2 <- ncor2[lower.tri(ncor2)]
summary(ncor2)
scan2 <- scanone(cross2, pheno.col = 1:1000, method = "hk")
scandrop2 <- set.to.zero.beyond.drop.int(chr = scan2[,1],
                                         scanmat = as.matrix(scan2[,-c(1,2)]), 
                                         thr = min(lod.thrs), 
                                         drop = 1.5) 
counts2 <- t(count.thr(scandrop2, lod.thrs, droptwo=FALSE))
out2 <- data.frame(scan2[, 1:2], counts2)
class(out2) <- c("scanone", "data.frame")
@ 

\begin{figure}[!ht]
\begin{center}
<<label=plotex2counts,width=6,height=6,fig=TRUE,echo=TRUE>>=
par(mar=c(4.1,4.1,0.1,0.1))
plot(out2, lodcolumn = 5, ylab = "counts", cex.lab = 1.5, cex.axis = 1.5)
@ 
\caption{Hotspot architecture targeting 5\% GWER for example 2.}
\label{plotex2counts}
\end{center}
\end{figure}

<<echo=FALSE>>=
if(!exists("Q.2")) {
  set.seed(12345)
  Q.2 <- WW.perm(scanmat = scandrop2, 
                 lod.thrs = lod.thrs, 
                 n.perm = 100, 
                 verbose = FALSE)
}
@
\begin{Schunk}
\begin{Sinput}
> set.seed(12345)
> Q.2 <- WW.perm(scanmat = scandrop2, 
+                 lod.thrs = lod.thrs, 
+                 n.perm = 100, 
+                 verbose = FALSE)
\end{Sinput}
\end{Schunk}
<<>>=
Q.2.thr <- WW.summary(Q.2, alphas)
@ 
<<echo=FALSE>>=
if(!exists("NL.N.2")) {
  set.seed(12345)
  NL.N.2 <- NL.N.perm(cross = cross2, 
                      Nmax = 300, 
                      n.perm = 100, 
                      lod.thrs = lod.thrs, 
                      drop = 1.5, 
                      verbose = FALSE) 
}
@
\begin{Schunk}
\begin{Sinput}
> set.seed(12345)
> NL.N.2 <- NL.N.perm(cross = cross2, 
+                      Nmax = 300, 
+                      n.perm = 100, 
+                      lod.thrs = lod.thrs, 
+                      drop = 1.5, 
+                      verbose = FALSE) 
\end{Sinput}
\end{Schunk}
<<>>=
NL.N.2.thrs <- NL.N.summary(NL.N.2[[1]], NL.N.2[[2]], alphas)
NL.2.thr <- NL.N.2.thrs[[1]]
N.2.thr <- NL.N.2.thrs[[2]]
@
<<echo=FALSE>>=
if(!file.exists("savedperms.RData"))
  save(pt, Q.1, NL.N.1, Q.2, NL.N.2, file = "savedperms.RData", compress = TRUE)
@

The $Q$-method thresholds are quite similar to the previous example. This is not unexpected since the number of significant linkages detected in examples 1 and 2 were similar (respectively, 1438 and 1413 for a LOD threshold of 2.44), and the $Q$-method thresholds are a function of the number of significant QTLs (the higher the number of significant linkages, the higher the threshold) and not of the correlation among the phenotypes.

<<>>=
diag(Q.2.thr)
apply(counts1, 2, sum)
apply(counts2, 2, sum)
@

The $N$-method, as expected, gave rise to much smaller thresholds in this second example with uncorrelated phenotypes. Additionally, inspection of Figure \ref{plotex2counts} shows no spurious hotspots on chromosome 1.

<<>>=
diag(N.2.thr)
@
<<label=plotex2slidingbar,width=6,height=6,fig=TRUE,echo=TRUE,include=FALSE>>=
N.2 <- round(N.2.thr[5, 5], 0)
sliding.bar.plot(scan = data.frame(scan2[, 1:2], scandrop2), 
                 lod.thr = NL.2.thr[1:N.2, 5], 
                 size.thr = 1:N.2, 
                 gap = 50, 
                 y.axes = seq(1, N.2, by = 1))
@

\begin{figure}[!ht]
\begin{center}
\includegraphics{qtlhot-plotex2slidingbar}
\caption{Hotspot significance profile targeting 5\% GWER for example 2.}
\label{plotex2slidingbar}
\end{center}
\end{figure}

Figure \ref{plotex2slidingbar} presents the hotspot significance profile targeting 5\% GWER. For this second example, all methods correctly detected the simulated hotspots.

<<label=plotex2sigct,width=6,height=6,fig=TRUE,echo=TRUE,include=FALSE>>=
hot.scan2 <- qtlhot.scan(cross2, scan2, NL.N.2$max.lod.quant, lod.thrs, probs = seq(.01, .1, by = .01), level = 0.05)
par(mar = c(4.1,4.1,0.1,4.1))
plot(out2, lodcolumn = 5, ylab = "counts", cex.lab = 1.5, cex.axis = 1.5)
plot(hot.scan2, lodcolumn = 2, add = TRUE, col = "red")
## Add right axis with 
quant <- attr(hot.scan2, "quant")
tmp <- seq(along = quant)
axis(4, at = tmp, label = round(quant[tmp], 2), las = 1, cex = 0.35)
mtext("sliding LOD thresholds",4, 1, cex=1.5)
@

\begin{figure}[!ht]
\begin{center}
\includegraphics{qtlhot-plotex2sigct}
\caption{Hotspot significance scan targeting 5\% GWER for example 2.}
\label{plotex2sigct}
\end{center}
\end{figure}

Figure \ref{plotex2sigct} shows another way to represent significant hotspots. We overlay the largest significant hotspot counts using the sliding quantiles in red on top of the curve on Figure \ref{plotex2counts}. Notice that the large sizes are all significant, but only small sizes corresponding to larger LOD scores are significant. We add a right axis with the sliding LOD thresholds.

\section{References}

\begin{enumerate}

\item Breitling R., Y. Li, B. M. Tesson, J. Fu, C. Wu, et al., 2008 Genetical genomics: spotlight on QTL hotspots. PLoS Genetics {\bf 4:} e1000232.

\item Broman K. W., W. Wu, S. Sen, G. A. Churchill, 2003 R/qtl: QTL mapping in experimental crosses. Bioinformatics {\bf 19}: 889-890.

\item Chaibub Neto et al., 2012 Quantile-based permutation thresholds for QTL hotspots. Genetics (under review).

\item Churchill G. A., and R. W. Doerge, 1994 Empirical threshold values for quantitative trait mapping. Genetics {\bf 138}: 963-971.

\item Manichaikul A., J. Dupuis, S. Sen, and K. W. Broman, 2006 Poor performance of bootstrap confidence intervals for the location of a quantitative trait locus. Genetics {\bf 174:} 481-489.

\item West M. A. L., K. Kim, D. J. Kliebenstein, H. van Leeuwen, R. W. Michelmore, R. W. Doerge, D. A. St. Clair 2007 Global eQTL mapping reveals the complex genetic architecture of transcript-level variation in Arabidopsis. Genetics {\bf 175:} 1441-1450.

\item Wu C., D. L. Delano, N. Mitro, S. V. Su, J. Janes, et al. 2008 Gene set enrichment in eQTL data identifies novel annotations and pathway regulators. PLoS Genetics {\bf 4:} e1000070.

\end{enumerate}

\end{document} 
